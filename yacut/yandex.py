import os
import aiohttp
import asyncio
import urllib.parse
from dotenv import load_dotenv
from flask import Flask, request, render_template, redirect, url_for
from yacut.utils import get_unique_short_id

load_dotenv()

API_HOST = os.environ.get('API_HOST')
API_VERSION = os.environ.get('API_VERSION')
DISK_TOKEN = os.environ.get('DISK_TOKEN')

AUTH_HEADERS = {'Authorization': f'OAuth {DISK_TOKEN}'}

UPLOAD_URL = f'{API_HOST}{API_VERSION}/disk/resources/upload'
DOWNLOAD_URL = f'{API_HOST}{API_VERSION}/disk/resources/download'

app = Flask(__name__)


# -------------------------------
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
# -------------------------------
async def upload_file_and_get_url(session, file):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É + –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É"""
    path = f'app:/{file.filename}'

    # 1. –ü–æ–ª—É—á–∞–µ–º upload_href
    async with session.get(
        UPLOAD_URL,
        headers=AUTH_HEADERS,
        params={'path': path, 'overwrite': 'true'}
    ) as resp:
        data = await resp.json()
        upload_href = data['href']

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    async with session.put(upload_href, data=file.read()) as resp:
        if resp.status not in (201, 202):
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}, —Å—Ç–∞—Ç—É—Å {resp.status}")

    # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
    async with session.get(
        DOWNLOAD_URL,
        headers=AUTH_HEADERS,
        params={'path': path}
    ) as resp:
        data = await resp.json()
        direct_url = data['href']

    # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π id
    short_id = get_unique_short_id()
    return {"filename": file.filename, "short_id": short_id, "url": direct_url}


async def async_upload_files_to_yandex(files):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.

    Args:
        files (list): –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Flask request.files.getlist).

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–±—ã—á–Ω–æ ‚Äî URL'—ã —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å–µ).
              –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç, –≤–µ—Ä–Ω—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    if files:
        print(f"[üå∑ INFO] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤")

        tasks = []

        # —Å–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–¥–Ω–∞ –Ω–∞ –≤—Å–µ —Ñ–∞–π–ª—ã)
        async with aiohttp.ClientSession() as session:
            print("[üå∑ INFO] –°–æ–∑–¥–∞–Ω–∞ aiohttp-—Å–µ—Å—Å–∏—è")

            for f in files:
                print(f"[üå∑ DEBUG] –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è —Ñ–∞–π–ª–∞: {f.filename}")
                # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É
                tasks.append(asyncio.ensure_future(upload_file_and_get_url(session, f)))

            # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            print("[üå∑ INFO] –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
            results = await asyncio.gather(*tasks)
            print("[üå∑ INFO] –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–æ–∫)
        print(f"[üå∑ RESULT] –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
        return results
    print("[üå∑ WARN] –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
    return []

async def main():
    async with aiohttp.ClientSession() as session:
        result = await upload_file_and_get_url(session, "anna.txt")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)


if __name__ == '__main__':
    asyncio.run(main())